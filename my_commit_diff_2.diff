commit d272f4e2ea7f44a8f312511c7c0ae84bbc5f795b
Author: Skottbie T. <307495077@qq.com>
Date:   Sun Aug 24 16:35:13 2025 +0800

    教师Dashboard 设计优化

diff --git a/client/src/pages/TeacherDashboard.jsx b/client/src/pages/TeacherDashboard.jsx
index dbb4f56..2053498 100644
--- a/client/src/pages/TeacherDashboard.jsx
+++ b/client/src/pages/TeacherDashboard.jsx
@@ -12,7 +12,7 @@ import PullToRefreshContainer from '../components/PullToRefreshContainer';
 import useAutoRefresh from '../hooks/useAutoRefresh';
 import { getGreeting } from '../utils/greetings';
 import NicknamePrompt from '../components/NicknamePrompt';
-
+import React from 'react';
 import { 
   // 与StudentDashboard一致的图标
   ClipboardList,    // 📋 替换 (任务描述、提交要求、活跃任务)
@@ -23,6 +23,7 @@ import {
   BookOpen,         // 📚 替换 (我的班级、课程任务)
   FileText,         // 📝 替换 (查看提交、课堂练习)
   Clock3,           // 🕐 替换 (开发环境时间显示)
+  ChevronDown,      // 🆕 新增：用于折叠功能
   
   // TeacherDashboard新增的图标
   BarChart3,        // 📊 替换 (班级统计、状态信息)
@@ -36,6 +37,66 @@ import {
   GraduationCap     // 🏫 替换 (关联班级)
 } from 'lucide-react';
 
+
+  const CollapsibleSection = React.memo(({ title, count, type, isCollapsed, onToggle, children }) => {
+    // 根据类型选择图标和颜色主题
+    const getTheme = () => {
+      if (type === 'expired') {
+        return {
+          icon: <X className="w-4 h-4 text-red-600 dark:text-red-400" />,
+          bgColor: 'bg-red-50 dark:bg-gray-800/50 border border-red-100 dark:border-gray-700',
+          hoverBg: 'hover:bg-red-100 dark:hover:bg-gray-700/50'
+        };
+      } else {
+        return {
+          icon: <Clock className="w-4 h-4 text-blue-600 dark:text-blue-400" />,
+          bgColor: 'bg-blue-50 dark:bg-gray-800/50 border border-blue-100 dark:border-gray-700', 
+          hoverBg: 'hover:bg-blue-100 dark:hover:bg-gray-700/50'
+        };
+      }
+    };
+
+    const theme = getTheme();
+
+    return (
+      <div className="space-y-3">
+        <button
+          onClick={() => onToggle(type)}
+          className={`w-full flex items-center justify-between p-3 rounded-xl transition-all duration-200 ${theme.bgColor} ${theme.hoverBg}`}
+        >
+          <div className="flex items-center gap-3">
+            {theme.icon}
+            <span className="font-medium text-gray-800 dark:text-gray-200">
+              {title} ({count})
+            </span>
+          </div>
+          <motion.div
+            animate={{ rotate: isCollapsed ? 0 : 180 }}
+            transition={{ duration: 0.2 }}
+          >
+            <ChevronDown className="w-4 h-4 text-gray-500 dark:text-gray-400" />
+          </motion.div>
+        </button>
+        
+        <AnimatePresence>
+          {!isCollapsed && (
+            <motion.div
+              initial={{ height: 0, opacity: 0 }}
+              animate={{ height: "auto", opacity: 1 }}
+              exit={{ height: 0, opacity: 0 }}
+              transition={{ duration: 0.3, ease: "easeInOut" }}
+              style={{ overflow: "hidden" }}
+            >
+              <div className="space-y-4 pl-2">
+                {children}
+              </div>
+            </motion.div>
+          )}
+        </AnimatePresence>
+      </div>
+    );
+  });
+
 const TeacherDashboard = () => {
   const [user, setUser] = useState(null);
   const [form, setForm] = useState({
@@ -74,6 +135,28 @@ const TeacherDashboard = () => {
   const [showBatchModal, setShowBatchModal] = useState(false);
   const [batchOperation, setBatchOperation] = useState('');
   const [batchLoading, setBatchLoading] = useState(false);
+    // 🚀 提前计算当前任务列表
+  const currentTasks = useMemo(() => tasks[currentCategory] || [], [tasks, currentCategory]);
+
+  // 📌 新增：折叠状态管理
+  const [isNewTaskFormCollapsed, setIsNewTaskFormCollapsed] = useState(true); // 发布新任务表单默认折叠
+  const [activeTasksCollapsed, setActiveTasksCollapsed] = useState({
+    expired: false,     // 已截止任务默认展开  
+    notExpired: true    // 未截止任务默认折叠
+  });
+
+  // 📌 新增：切换表单折叠状态
+  const toggleNewTaskForm = useCallback(() => {
+    setIsNewTaskFormCollapsed(prev => !prev);
+  }, []);
+
+  // 📌 新增：切换活跃任务分组折叠状态
+  const toggleActiveTasksGroup = useCallback((type) => {
+    setActiveTasksCollapsed(prev => ({
+      ...prev,
+      [type]: !prev[type]
+    }));
+  }, []);
   
   const navigate = useNavigate();
   const [myClasses, setMyClasses] = useState([]);
@@ -148,6 +231,24 @@ const TeacherDashboard = () => {
     fetchInitialData();
   }, [fetchInitialData]);
 
+
+
+  // 🆕 新增：活跃任务分组（只在active分类下生效）
+  const groupedActiveTasks = useMemo(() => {
+      if (currentCategory !== 'active') {
+        return null; // 非活跃任务分类不分组
+      }
+      
+      const now = new Date();
+      const expired = currentTasks.filter(task => new Date(task.deadline) <= now);
+      const notExpired = currentTasks.filter(task => new Date(task.deadline) > now);
+      
+      return {
+        expired,
+        notExpired
+      };
+    }, [currentTasks, currentCategory]);
+
   // 📌 获取任务函数 - 优化为只在需要时请求
   const fetchTasks = useCallback(async (category = 'active') => {
     try {
@@ -439,8 +540,7 @@ const TeacherDashboard = () => {
     }
   }, []);
 
-  // 🚀 提前计算当前任务列表
-  const currentTasks = useMemo(() => tasks[currentCategory] || [], [tasks, currentCategory]);
+
 
 // 📌 移动端任务卡片渲染函数
   const renderMobileTaskCard = useCallback((task) => {
@@ -896,11 +996,33 @@ const TeacherDashboard = () => {
             animate={{ opacity: 1, y: 0 }}
             transition={{ delay: 0.1 }}
             className="bg-gradient-to-r from-white via-blue-50/30 to-purple-50/30 dark:from-gray-800 dark:via-blue-900/10 dark:to-purple-900/10 rounded-mobile-2xl border border-gray-200/60 dark:border-gray-700/60 backdrop-blur-xl shadow-mobile p-6"
+            style={{ paddingBottom: '0.5rem' }}
           >
-          <h2 className="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-4 flex items-center gap-2">
+          <button
+            onClick={toggleNewTaskForm}
+            className="w-full flex items-center justify-between mb-4 p-2 -m-2 rounded-lg hover:bg-black/5 dark:hover:bg-white/5 transition-colors aigc-native-button"
+          >
+            <h2 className="text-lg font-semibold text-gray-800 dark:text-gray-100 flex items-center gap-2">
               <Pin className="w-5 h-5 text-blue-600 dark:text-blue-400" />
               发布新任务
             </h2>
+            <motion.div
+              animate={{ rotate: isNewTaskFormCollapsed ? 0 : 180 }}
+              transition={{ duration: 0.2 }}
+            >
+              <ChevronDown className="w-5 h-5 text-gray-500 dark:text-gray-400" />
+            </motion.div>
+          </button>
+
+          <AnimatePresence>
+            {!isNewTaskFormCollapsed && (
+              <motion.div
+                initial={{ height: 0, opacity: 0 }}
+                animate={{ height: "auto", opacity: 1 }}
+                exit={{ height: 0, opacity: 0 }}
+                transition={{ duration: 0.3, ease: "easeInOut" }}
+                style={{ overflow: "hidden" }}
+              >
 
             <form onSubmit={handleSubmit} className="space-y-6">
               {/* 基础信息 */}
@@ -1134,6 +1256,12 @@ const TeacherDashboard = () => {
                 </div>
               )}
             </form>
+            </motion.div>
+              )}
+            </AnimatePresence>
+
+
+
           </motion.div>
 
           {/* 任务管理区域 */}
@@ -1276,7 +1404,7 @@ const TeacherDashboard = () => {
                     </PrimaryButton>
                   )}
                 </motion.div>
-              ) : (
+                  ) : (
                 <motion.div
                   key="tasks"
                   initial={{ opacity: 0 }}
@@ -1284,285 +1412,875 @@ const TeacherDashboard = () => {
                   exit={{ opacity: 0 }}
                   className="space-y-4"
                 >
-                  {currentTasks.map((task, index) => (
-                    isMobile ? (
-                      <motion.div
-                        key={task._id}
-                        initial={{ opacity: 0, y: 20 }}
-                        animate={{ opacity: 1, y: 0 }}
-                        transition={{ delay: index * 0.05 }}
-                      >
-                        {renderMobileTaskCard(task)}
-                      </motion.div>
-                    ) : (
-                      // 保持原有的桌面端渲染逻辑
-                      <motion.div
-                        key={task._id}
-                        initial={{ opacity: 0, y: 20 }}
-                        animate={{ opacity: 1, y: 0 }}
-                        transition={{ delay: index * 0.05 }}
-                        className="bg-white dark:bg-gray-800 rounded-2xl shadow-md p-6 border border-gray-200 dark:border-gray-700"
-                      >
-                        {/* 桌面端任务卡片内容保持不变 */}
-                        <div className="flex items-start gap-4">
-                          {/* 选择框 */}
-                          <div className="flex-shrink-0 pt-1">
-                            <input
-                              type="checkbox"
-                              checked={selectedTasks.has(task._id)}
-                              onChange={() => toggleTaskSelection(task._id)}
-                              className="form-checkbox checkbox-lg"
-                            />
-                          </div>
+                  {/* 🆕 活跃任务分组显示 */}
+                  {currentCategory === 'active' && groupedActiveTasks ? (
+                    <div className="space-y-6">
+                      {/* 已截止任务区域 */}
+                      {groupedActiveTasks.expired.length > 0 && (
+                        <CollapsibleSection
+                          key="expired-section"
+                          title="已截止作业"
+                          count={groupedActiveTasks.expired.length}
+                          type="expired"
+                          isCollapsed={activeTasksCollapsed.expired}
+                          onToggle={toggleActiveTasksGroup}
+                        >
+                          {groupedActiveTasks.expired.map((task, index) => (
+                            isMobile ? (
+                              <motion.div
+                                key={task._id}
+                                initial={{ opacity: 0, y: 20 }}
+                                animate={{ opacity: 1, y: 0 }}
+                                transition={{ delay: index * 0.05 }}
+                              >
+                                {renderMobileTaskCard(task)}
+                              </motion.div>
+                            ) : (
+                              // 保持原有的桌面端渲染逻辑
+                              <motion.div
+                                key={task._id}
+                                initial={{ opacity: 0, y: 20 }}
+                                animate={{ opacity: 1, y: 0 }}
+                                transition={{ delay: index * 0.05 }}
+                                className="bg-white dark:bg-gray-800 rounded-2xl shadow-md p-6 border border-gray-200 dark:border-gray-700"
+                              >
+                                {/* 桌面端任务卡片内容保持不变 */}
+                                <div className="flex items-start gap-4">
+                                  {/* 选择框 */}
+                                  <div className="flex-shrink-0 pt-1">
+                                    <input
+                                      type="checkbox"
+                                      checked={selectedTasks.has(task._id)}
+                                      onChange={() => toggleTaskSelection(task._id)}
+                                      className="form-checkbox checkbox-lg"
+                                    />
+                                  </div>
 
-                          <div className="flex-1 min-w-0">
-                            <div className="flex flex-col lg:flex-row lg:justify-between lg:items-start gap-4">
-                              <div className="flex-1 min-w-0">
-                                <h3 className="font-bold text-xl text-gray-800 dark:text-gray-100 mb-2 line-clamp-2">
-                                  {task.title}
-                                </h3>
-                                
-                                {/* 状态标签 */}
-                                <div className="flex items-center gap-2 flex-wrap mb-2">
-                                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getTaskStatus(task.deadline).color} ${
-                                    getTaskStatus(task.deadline).status === 'expired' 
-                                      ? 'bg-red-100 dark:bg-red-900/30 border border-red-200 dark:border-red-700/50'
-                                      : getTaskStatus(task.deadline).status === 'urgent'
-                                      ? 'bg-orange-100 dark:bg-orange-900/30 border border-orange-200 dark:border-orange-700/50'
-                                      : getTaskStatus(task.deadline).status === 'warning'
-                                      ? 'bg-yellow-100 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-700/50'
-                                      : 'bg-green-100 dark:bg-green-900/30 border border-green-200 dark:border-green-700/50'
-                                  }`}>
-                                    {getTaskStatus(task.deadline).text}
-                                  </span>
-                                  
-                                  <span className="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300">
-                                    {task.category}
-                                  </span>
-                                  
-                                  {currentCategory === 'deleted' && task.daysLeft !== undefined && (
-                                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
-                                      task.daysLeft > 7 
-                                        ? 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300'
-                                        : task.daysLeft > 3
-                                        ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300'
-                                        : 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300'
-                                    }`}>
-                                      {task.daysLeft}天后永久删除
-                                    </span>
-                                  )}
+                                  <div className="flex-1 min-w-0">
+                                    <div className="flex flex-col lg:flex-row lg:justify-between lg:items-start gap-4">
+                                      <div className="flex-1 min-w-0">
+                                        <h3 className="font-bold text-xl text-gray-800 dark:text-gray-100 mb-2 line-clamp-2">
+                                          {task.title}
+                                        </h3>
+                                        
+                                        {/* 状态标签 */}
+                                        <div className="flex items-center gap-2 flex-wrap mb-2">
+                                          <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getTaskStatus(task.deadline).color} ${
+                                            getTaskStatus(task.deadline).status === 'expired' 
+                                              ? 'bg-red-100 dark:bg-red-900/30 border border-red-200 dark:border-red-700/50'
+                                              : getTaskStatus(task.deadline).status === 'urgent'
+                                              ? 'bg-orange-100 dark:bg-orange-900/30 border border-orange-200 dark:border-orange-700/50'
+                                              : getTaskStatus(task.deadline).status === 'warning'
+                                              ? 'bg-yellow-100 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-700/50'
+                                              : 'bg-green-100 dark:bg-green-900/30 border border-green-200 dark:border-green-700/50'
+                                          }`}>
+                                            {getTaskStatus(task.deadline).text}
+                                          </span>
+                                          
+                                          <span className="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300">
+                                            {task.category}
+                                          </span>
+                                          
+                                          {currentCategory === 'deleted' && task.daysLeft !== undefined && (
+                                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
+                                              task.daysLeft > 7 
+                                                ? 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300'
+                                                : task.daysLeft > 3
+                                                ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300'
+                                                : 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300'
+                                            }`}>
+                                              {task.daysLeft}天后永久删除
+                                            </span>
+                                          )}
+                                        </div>
+
+                                        {/* 任务描述 */}
+                                        {task.description && (
+                                          <div className="mb-2">
+                                            <div className="bg-blue-50/60 dark:bg-blue-900/20 rounded-mobile-lg p-3 border border-blue-200/50 dark:border-blue-700/30">
+                                              <div className="flex items-start gap-2">
+                                                <ClipboardList className="w-4 h-4 text-blue-600 dark:text-blue-400 flex-shrink-0 mt-0.5" />
+                                                <p className="text-sm text-blue-800 dark:text-blue-200 line-clamp-3">
+                                                  {task.description}
+                                                </p>
+                                              </div>
+                                            </div>
+                                          </div>
+                                        )}
+                                      </div>
+                                    </div>
+                                    
+                                    {/* 任务详情网格 */}
+                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4">
+                                      <div className="bg-gray-50/80 dark:bg-gray-800/50 rounded-mobile-lg p-3">
+                                        <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 flex items-center gap-1">
+                                          <FolderOpen className="w-3.5 h-3.5" />
+                                          任务信息
+                                        </div>
+                                        <div className="space-y-1 text-sm">
+                                          <p><span className="font-medium">类型:</span> {task.category}</p>
+                                          <p><span className="font-medium">文件:</span> {task.needsFile ? '必交' : '无'}</p>
+                                          <p><span className="font-medium">AIGC:</span> {task.allowAIGC ? '允许' : '禁止'}</p>
+                                          <p><span className="font-medium">班级:</span>  {task.classIds && task.classIds.length > 0
+                                            ? task.classIds.map(cls => cls.name).join('，')
+                                            : '未绑定'}
+                                        </p>
+                                        </div>
+                                      </div>
+
+                                      <div className="bg-gray-50/80 dark:bg-gray-800/50 rounded-mobile-lg p-3">
+                                        <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 flex items-center gap-1">
+                                          <Clock className="w-3.5 h-3.5" />
+                                          时间设置
+                                        </div>
+                                        <div className="space-y-1 text-sm">
+                                          <p><span className="font-medium">截止:</span> {formatDeadline(task.deadline)}</p>
+                                          <p><span className="font-medium">逾期:</span> {task.allowLateSubmission ? '允许' : '不允许'}</p>
+                                        </div>
+                                      </div>
+
+                                      <div className="bg-gray-50/80 dark:bg-gray-800/50 rounded-mobile-lg p-3">
+                                        <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 flex items-center gap-1">
+                                          <BarChart3 className="w-3.5 h-3.5" />
+                                          状态信息
+                                        </div>
+                                        <div className="space-y-1 text-sm">
+                                          {currentCategory === 'archived' && (
+                                            <p><span className="font-medium">学生查看:</span> {task.allowStudentViewWhenArchived ? '开放' : '限制'}</p>
+                                          )}
+                                          <p><span className="font-medium">创建:</span> {new Date(task.createdAt).toLocaleDateString()}</p>
+                                        </div>
+                                      </div>
+                                    </div>
+                                    
+                                  {/* 操作按钮组 */}
+                                    <div className="flex flex-wrap gap-2">
+                                      {/* 查看提交记录按钮 */}
+                                      <SecondaryButton
+                                        size="sm"
+                                        icon={<FileText className="w-4 h-4" />}
+                                        onClick={() => navigate(`/task/${task._id}/submissions`)}
+                                      >
+                                        查看提交
+                                      </SecondaryButton>
+                                      
+                                      {/* 班级提交情况按钮 */}
+                                      <PrimaryButton
+                                        size="sm"
+                                        icon={<BarChart3 className="w-4 h-4" />}
+                                        onClick={() => navigate(`/task/${task._id}/class-status`)}
+                                      >
+                                        班级统计
+                                      </PrimaryButton>
+
+                                        {/* 根据任务状态显示不同操作按钮 */}
+                                      {currentCategory === 'active' && (
+                                        <>
+                                          <SecondaryButton
+                                            size="sm"
+                                            icon={<Archive className="w-4 h-4" />}
+                                            onClick={() => setConfirmDialog({
+                                              isOpen: true,
+                                              title: '确认归档任务',
+                                              message: `确定要归档任务"${task.title}"吗？归档后学生将无法提交作业。`,
+                                              onConfirm: () => {
+                                                handleTaskOperation(task._id, 'archive');
+                                                setConfirmDialog(prev => ({ ...prev, isOpen: false }));
+                                              },
+                                              confirmText: '归档',
+                                              confirmVariant: 'primary'
+                                            })}
+                                            disabled={batchLoading}
+                                          >
+                                            归档
+                                          </SecondaryButton>
+                                          
+                                          <DangerButton
+                                            size="sm"
+                                            icon={<Trash2 className="w-4 h-4" />}
+                                            onClick={() => setConfirmDialog({
+                                              isOpen: true,
+                                              title: '确认删除任务',
+                                              message: `确定要删除任务"${task.title}"吗？删除后30天内可恢复。`,
+                                              onConfirm: () => {
+                                                handleTaskOperation(task._id, 'soft_delete');
+                                                setConfirmDialog(prev => ({ ...prev, isOpen: false }));
+                                              },
+                                              confirmText: '删除',
+                                              confirmVariant: 'danger'
+                                            })}
+                                            disabled={batchLoading}
+                                          >
+                                            删除
+                                          </DangerButton>
+                                        </>
+                                      )}
+
+                                      {currentCategory === 'archived' && (
+                                        <>
+                                          <SecondaryButton
+                                            size="sm"
+                                            icon={<Send className="w-4 h-4" />}
+                                            onClick={() => handleTaskOperation(task._id, 'unarchive')}
+                                            disabled={batchLoading}
+                                          >
+                                            恢复
+                                          </SecondaryButton>
+                                          
+                                          <SecondaryButton
+                                            size="sm"
+                                            icon={task.allowStudentViewWhenArchived ? <Lock className="w-4 h-4" /> : <Unlock className="w-4 h-4" />}
+                                            onClick={async () => {
+                                              try {
+                                                await api.put(`/task/${task._id}/student-permission`, {
+                                                  allowStudentViewWhenArchived: !task.allowStudentViewWhenArchived
+                                                });
+                                                toast.success(' 权限设置成功');
+                                                await fetchTasks(currentCategory);
+                                              } catch (err) {
+                                                toast.error(` 权限设置失败：${err.response?.data?.message || err.message}`);
+                                              }
+                                            }}
+                                            disabled={batchLoading}
+                                          >
+                                            {task.allowStudentViewWhenArchived ? '限制查看' : '开放查看'}
+                                          </SecondaryButton>
+                                          
+                                          <DangerButton
+                                            size="sm"
+                                            icon={<Trash2 className="w-4 h-4" />}
+                                            onClick={() => setConfirmDialog({
+                                              isOpen: true,
+                                              title: '确认删除任务',
+                                              message: `确定要删除任务"${task.title}"吗？删除后30天内可恢复。`,
+                                              onConfirm: () => {
+                                                handleTaskOperation(task._id, 'soft_delete');
+                                                setConfirmDialog(prev => ({ ...prev, isOpen: false }));
+                                              },
+                                              confirmText: '删除',
+                                              confirmVariant: 'danger'
+                                            })}
+                                            disabled={batchLoading}
+                                          >
+                                            删除
+                                          </DangerButton>
+                                        </>
+                                      )}
+
+                                      {currentCategory === 'deleted' && (
+                                        <>
+                                          <PrimaryButton
+                                            size="sm"
+                                            icon={<RefreshCw className="w-4 h-4" />}
+                                            onClick={() => handleTaskOperation(task._id, 'restore')}
+                                            disabled={batchLoading}
+                                          >
+                                            恢复
+                                          </PrimaryButton>
+                                          
+                                          <DangerButton
+                                            size="sm"
+                                            icon={<X className="w-4 h-4" />}
+                                            onClick={() => setConfirmDialog({
+                                              isOpen: true,
+                                              title: '⚠️ 永久删除任务',
+                                              message: `确定要永久删除任务"${task.title}"吗？此操作无法撤销！`,
+                                              onConfirm: () => {
+                                                handleTaskOperation(task._id, 'hard_delete');
+                                                setConfirmDialog(prev => ({ ...prev, isOpen: false }));
+                                              },
+                                              confirmText: '永久删除',
+                                              confirmVariant: 'danger'
+                                            })}
+                                            disabled={batchLoading}
+                                          >
+                                            永久删除
+                                          </DangerButton>
+                                        </>
+                                      )}
+                                    </div>
+                                  </div>
                                 </div>
+                              </motion.div>
+                            )
+                          ))}
+                        </CollapsibleSection>
+                      )}
 
-                                {/* 任务描述 */}
-                                {task.description && (
-                                  <div className="mb-2">
-                                    <div className="bg-blue-50/60 dark:bg-blue-900/20 rounded-mobile-lg p-3 border border-blue-200/50 dark:border-blue-700/30">
-                                      <div className="flex items-start gap-2">
-                                        <ClipboardList className="w-4 h-4 text-blue-600 dark:text-blue-400 flex-shrink-0 mt-0.5" />
-                                        <p className="text-sm text-blue-800 dark:text-blue-200 line-clamp-3">
-                                          {task.description}
+                      {/* 未截止任务区域 */}
+                      {groupedActiveTasks.notExpired.length > 0 && (
+                        <CollapsibleSection
+                          key="notexpired-section"
+                          title="未截止作业"
+                          count={groupedActiveTasks.notExpired.length}
+                          type="notExpired"
+                          isCollapsed={activeTasksCollapsed.notExpired}
+                          onToggle={toggleActiveTasksGroup}
+                        >
+                          {groupedActiveTasks.notExpired.map((task, index) => (
+                            isMobile ? (
+                              <motion.div
+                                key={task._id}
+                                initial={{ opacity: 0, y: 20 }}
+                                animate={{ opacity: 1, y: 0 }}
+                                transition={{ delay: index * 0.05 }}
+                              >
+                                {renderMobileTaskCard(task)}
+                              </motion.div>
+                            ) : (
+                              // 保持原有的桌面端渲染逻辑
+                              <motion.div
+                                key={task._id}
+                                initial={{ opacity: 0, y: 20 }}
+                                animate={{ opacity: 1, y: 0 }}
+                                transition={{ delay: index * 0.05 }}
+                                className="bg-white dark:bg-gray-800 rounded-2xl shadow-md p-6 border border-gray-200 dark:border-gray-700"
+                              >
+                                {/* 桌面端任务卡片内容保持不变 */}
+                                <div className="flex items-start gap-4">
+                                  {/* 选择框 */}
+                                  <div className="flex-shrink-0 pt-1">
+                                    <input
+                                      type="checkbox"
+                                      checked={selectedTasks.has(task._id)}
+                                      onChange={() => toggleTaskSelection(task._id)}
+                                      className="form-checkbox checkbox-lg"
+                                    />
+                                  </div>
+
+                                  <div className="flex-1 min-w-0">
+                                    <div className="flex flex-col lg:flex-row lg:justify-between lg:items-start gap-4">
+                                      <div className="flex-1 min-w-0">
+                                        <h3 className="font-bold text-xl text-gray-800 dark:text-gray-100 mb-2 line-clamp-2">
+                                          {task.title}
+                                        </h3>
+                                        
+                                        {/* 状态标签 */}
+                                        <div className="flex items-center gap-2 flex-wrap mb-2">
+                                          <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getTaskStatus(task.deadline).color} ${
+                                            getTaskStatus(task.deadline).status === 'expired' 
+                                              ? 'bg-red-100 dark:bg-red-900/30 border border-red-200 dark:border-red-700/50'
+                                              : getTaskStatus(task.deadline).status === 'urgent'
+                                              ? 'bg-orange-100 dark:bg-orange-900/30 border border-orange-200 dark:border-orange-700/50'
+                                              : getTaskStatus(task.deadline).status === 'warning'
+                                              ? 'bg-yellow-100 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-700/50'
+                                              : 'bg-green-100 dark:bg-green-900/30 border border-green-200 dark:border-green-700/50'
+                                          }`}>
+                                            {getTaskStatus(task.deadline).text}
+                                          </span>
+                                          
+                                          <span className="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300">
+                                            {task.category}
+                                          </span>
+                                          
+                                          {currentCategory === 'deleted' && task.daysLeft !== undefined && (
+                                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
+                                              task.daysLeft > 7 
+                                                ? 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300'
+                                                : task.daysLeft > 3
+                                                ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300'
+                                                : 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300'
+                                            }`}>
+                                              {task.daysLeft}天后永久删除
+                                            </span>
+                                          )}
+                                        </div>
+
+                                        {/* 任务描述 */}
+                                        {task.description && (
+                                          <div className="mb-2">
+                                            <div className="bg-blue-50/60 dark:bg-blue-900/20 rounded-mobile-lg p-3 border border-blue-200/50 dark:border-blue-700/30">
+                                              <div className="flex items-start gap-2">
+                                                <ClipboardList className="w-4 h-4 text-blue-600 dark:text-blue-400 flex-shrink-0 mt-0.5" />
+                                                <p className="text-sm text-blue-800 dark:text-blue-200 line-clamp-3">
+                                                  {task.description}
+                                                </p>
+                                              </div>
+                                            </div>
+                                          </div>
+                                        )}
+                                      </div>
+                                    </div>
+                                    
+                                    {/* 任务详情网格 */}
+                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4">
+                                      <div className="bg-gray-50/80 dark:bg-gray-800/50 rounded-mobile-lg p-3">
+                                        <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 flex items-center gap-1">
+                                          <FolderOpen className="w-3.5 h-3.5" />
+                                          任务信息
+                                        </div>
+                                        <div className="space-y-1 text-sm">
+                                          <p><span className="font-medium">类型:</span> {task.category}</p>
+                                          <p><span className="font-medium">文件:</span> {task.needsFile ? '必交' : '无'}</p>
+                                          <p><span className="font-medium">AIGC:</span> {task.allowAIGC ? '允许' : '禁止'}</p>
+                                          <p><span className="font-medium">班级:</span>  {task.classIds && task.classIds.length > 0
+                                            ? task.classIds.map(cls => cls.name).join('，')
+                                            : '未绑定'}
                                         </p>
+                                        </div>
+                                      </div>
+
+                                      <div className="bg-gray-50/80 dark:bg-gray-800/50 rounded-mobile-lg p-3">
+                                        <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 flex items-center gap-1">
+                                          <Clock className="w-3.5 h-3.5" />
+                                          时间设置
+                                        </div>
+                                        <div className="space-y-1 text-sm">
+                                          <p><span className="font-medium">截止:</span> {formatDeadline(task.deadline)}</p>
+                                          <p><span className="font-medium">逾期:</span> {task.allowLateSubmission ? '允许' : '不允许'}</p>
+                                        </div>
+                                      </div>
+
+                                      <div className="bg-gray-50/80 dark:bg-gray-800/50 rounded-mobile-lg p-3">
+                                        <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 flex items-center gap-1">
+                                          <BarChart3 className="w-3.5 h-3.5" />
+                                          状态信息
+                                        </div>
+                                        <div className="space-y-1 text-sm">
+                                          {currentCategory === 'archived' && (
+                                            <p><span className="font-medium">学生查看:</span> {task.allowStudentViewWhenArchived ? '开放' : '限制'}</p>
+                                          )}
+                                          <p><span className="font-medium">创建:</span> {new Date(task.createdAt).toLocaleDateString()}</p>
+                                        </div>
                                       </div>
                                     </div>
+                                    
+                                  {/* 操作按钮组 */}
+                                    <div className="flex flex-wrap gap-2">
+                                      {/* 查看提交记录按钮 */}
+                                      <SecondaryButton
+                                        size="sm"
+                                        icon={<FileText className="w-4 h-4" />}
+                                        onClick={() => navigate(`/task/${task._id}/submissions`)}
+                                      >
+                                        查看提交
+                                      </SecondaryButton>
+                                      
+                                      {/* 班级提交情况按钮 */}
+                                      <PrimaryButton
+                                        size="sm"
+                                        icon={<BarChart3 className="w-4 h-4" />}
+                                        onClick={() => navigate(`/task/${task._id}/class-status`)}
+                                      >
+                                        班级统计
+                                      </PrimaryButton>
+
+                                        {/* 根据任务状态显示不同操作按钮 */}
+                                      {currentCategory === 'active' && (
+                                        <>
+                                          <SecondaryButton
+                                            size="sm"
+                                            icon={<Archive className="w-4 h-4" />}
+                                            onClick={() => setConfirmDialog({
+                                              isOpen: true,
+                                              title: '确认归档任务',
+                                              message: `确定要归档任务"${task.title}"吗？归档后学生将无法提交作业。`,
+                                              onConfirm: () => {
+                                                handleTaskOperation(task._id, 'archive');
+                                                setConfirmDialog(prev => ({ ...prev, isOpen: false }));
+                                              },
+                                              confirmText: '归档',
+                                              confirmVariant: 'primary'
+                                            })}
+                                            disabled={batchLoading}
+                                          >
+                                            归档
+                                          </SecondaryButton>
+                                          
+                                          <DangerButton
+                                            size="sm"
+                                            icon={<Trash2 className="w-4 h-4" />}
+                                            onClick={() => setConfirmDialog({
+                                              isOpen: true,
+                                              title: '确认删除任务',
+                                              message: `确定要删除任务"${task.title}"吗？删除后30天内可恢复。`,
+                                              onConfirm: () => {
+                                                handleTaskOperation(task._id, 'soft_delete');
+                                                setConfirmDialog(prev => ({ ...prev, isOpen: false }));
+                                              },
+                                              confirmText: '删除',
+                                              confirmVariant: 'danger'
+                                            })}
+                                            disabled={batchLoading}
+                                          >
+                                            删除
+                                          </DangerButton>
+                                        </>
+                                      )}
+
+                                      {currentCategory === 'archived' && (
+                                        <>
+                                          <SecondaryButton
+                                            size="sm"
+                                            icon={<Send className="w-4 h-4" />}
+                                            onClick={() => handleTaskOperation(task._id, 'unarchive')}
+                                            disabled={batchLoading}
+                                          >
+                                            恢复
+                                          </SecondaryButton>
+                                          
+                                          <SecondaryButton
+                                            size="sm"
+                                            icon={task.allowStudentViewWhenArchived ? <Lock className="w-4 h-4" /> : <Unlock className="w-4 h-4" />}
+                                            onClick={async () => {
+                                              try {
+                                                await api.put(`/task/${task._id}/student-permission`, {
+                                                  allowStudentViewWhenArchived: !task.allowStudentViewWhenArchived
+                                                });
+                                                toast.success(' 权限设置成功');
+                                                await fetchTasks(currentCategory);
+                                              } catch (err) {
+                                                toast.error(` 权限设置失败：${err.response?.data?.message || err.message}`);
+                                              }
+                                            }}
+                                            disabled={batchLoading}
+                                          >
+                                            {task.allowStudentViewWhenArchived ? '限制查看' : '开放查看'}
+                                          </SecondaryButton>
+                                          
+                                          <DangerButton
+                                            size="sm"
+                                            icon={<Trash2 className="w-4 h-4" />}
+                                            onClick={() => setConfirmDialog({
+                                              isOpen: true,
+                                              title: '确认删除任务',
+                                              message: `确定要删除任务"${task.title}"吗？删除后30天内可恢复。`,
+                                              onConfirm: () => {
+                                                handleTaskOperation(task._id, 'soft_delete');
+                                                setConfirmDialog(prev => ({ ...prev, isOpen: false }));
+                                              },
+                                              confirmText: '删除',
+                                              confirmVariant: 'danger'
+                                            })}
+                                            disabled={batchLoading}
+                                          >
+                                            删除
+                                          </DangerButton>
+                                        </>
+                                      )}
+
+                                      {currentCategory === 'deleted' && (
+                                        <>
+                                          <PrimaryButton
+                                            size="sm"
+                                            icon={<RefreshCw className="w-4 h-4" />}
+                                            onClick={() => handleTaskOperation(task._id, 'restore')}
+                                            disabled={batchLoading}
+                                          >
+                                            恢复
+                                          </PrimaryButton>
+                                          
+                                          <DangerButton
+                                            size="sm"
+                                            icon={<X className="w-4 h-4" />}
+                                            onClick={() => setConfirmDialog({
+                                              isOpen: true,
+                                              title: '⚠️ 永久删除任务',
+                                              message: `确定要永久删除任务"${task.title}"吗？此操作无法撤销！`,
+                                              onConfirm: () => {
+                                                handleTaskOperation(task._id, 'hard_delete');
+                                                setConfirmDialog(prev => ({ ...prev, isOpen: false }));
+                                              },
+                                              confirmText: '永久删除',
+                                              confirmVariant: 'danger'
+                                            })}
+                                            disabled={batchLoading}
+                                          >
+                                            永久删除
+                                          </DangerButton>
+                                        </>
+                                      )}
+                                    </div>
                                   </div>
-                                )}
-                              </div>
-                            </div>
-                            
-                            {/* 任务详情网格 */}
-                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4">
-                              <div className="bg-gray-50/80 dark:bg-gray-800/50 rounded-mobile-lg p-3">
-                                <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 flex items-center gap-1">
-                                  <FolderOpen className="w-3.5 h-3.5" />
-                                  任务信息
                                 </div>
-                                <div className="space-y-1 text-sm">
-                                  <p><span className="font-medium">类型:</span> {task.category}</p>
-                                  <p><span className="font-medium">文件:</span> {task.needsFile ? '必交' : '无'}</p>
-                                  <p><span className="font-medium">AIGC:</span> {task.allowAIGC ? '允许' : '禁止'}</p>
-                                  <p><span className="font-medium">班级:</span>  {task.classIds && task.classIds.length > 0
-                                    ? task.classIds.map(cls => cls.name).join('，')
-                                    : '未绑定'}
-                                </p>
-                                </div>
-                              </div>
+                              </motion.div>
+                            )
+                          ))}
+                        </CollapsibleSection>
+                      )}
+                    </div>
+                  ) : (
+                    // 🔄 归档任务和删除任务保持原有的平铺展示
+                    currentTasks.map((task, index) => (
+                      isMobile ? (
+                        <motion.div
+                          key={task._id}
+                          initial={{ opacity: 0, y: 20 }}
+                          animate={{ opacity: 1, y: 0 }}
+                          transition={{ delay: index * 0.05 }}
+                        >
+                          {renderMobileTaskCard(task)}
+                        </motion.div>
+                      ) : (
+                        // 保持原有的桌面端渲染逻辑
+                        <motion.div
+                          key={task._id}
+                          initial={{ opacity: 0, y: 20 }}
+                          animate={{ opacity: 1, y: 0 }}
+                          transition={{ delay: index * 0.05 }}
+                          className="bg-white dark:bg-gray-800 rounded-2xl shadow-md p-6 border border-gray-200 dark:border-gray-700"
+                        >
+                          {/* 桌面端任务卡片内容保持不变 */}
+                          <div className="flex items-start gap-4">
+                            {/* 选择框 */}
+                            <div className="flex-shrink-0 pt-1">
+                              <input
+                                type="checkbox"
+                                checked={selectedTasks.has(task._id)}
+                                onChange={() => toggleTaskSelection(task._id)}
+                                className="form-checkbox checkbox-lg"
+                              />
+                            </div>
 
-                              <div className="bg-gray-50/80 dark:bg-gray-800/50 rounded-mobile-lg p-3">
-                                <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 flex items-center gap-1">
-                                  <Clock className="w-3.5 h-3.5" />
-                                  时间设置
-                                </div>
-                                <div className="space-y-1 text-sm">
-                                  <p><span className="font-medium">截止:</span> {formatDeadline(task.deadline)}</p>
-                                  <p><span className="font-medium">逾期:</span> {task.allowLateSubmission ? '允许' : '不允许'}</p>
+                            <div className="flex-1 min-w-0">
+                              <div className="flex flex-col lg:flex-row lg:justify-between lg:items-start gap-4">
+                                <div className="flex-1 min-w-0">
+                                  <h3 className="font-bold text-xl text-gray-800 dark:text-gray-100 mb-2 line-clamp-2">
+                                    {task.title}
+                                  </h3>
+                                  
+                                  {/* 状态标签 */}
+                                  <div className="flex items-center gap-2 flex-wrap mb-2">
+                                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getTaskStatus(task.deadline).color} ${
+                                      getTaskStatus(task.deadline).status === 'expired' 
+                                        ? 'bg-red-100 dark:bg-red-900/30 border border-red-200 dark:border-red-700/50'
+                                        : getTaskStatus(task.deadline).status === 'urgent'
+                                        ? 'bg-orange-100 dark:bg-orange-900/30 border border-orange-200 dark:border-orange-700/50'
+                                        : getTaskStatus(task.deadline).status === 'warning'
+                                        ? 'bg-yellow-100 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-700/50'
+                                        : 'bg-green-100 dark:bg-green-900/30 border border-green-200 dark:border-green-700/50'
+                                    }`}>
+                                      {getTaskStatus(task.deadline).text}
+                                    </span>
+                                    
+                                    <span className="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300">
+                                      {task.category}
+                                    </span>
+                                    
+                                    {currentCategory === 'deleted' && task.daysLeft !== undefined && (
+                                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
+                                        task.daysLeft > 7 
+                                          ? 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300'
+                                          : task.daysLeft > 3
+                                          ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300'
+                                          : 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300'
+                                      }`}>
+                                        {task.daysLeft}天后永久删除
+                                      </span>
+                                    )}
+                                  </div>
+
+                                  {/* 任务描述 */}
+                                  {task.description && (
+                                    <div className="mb-2">
+                                      <div className="bg-blue-50/60 dark:bg-blue-900/20 rounded-mobile-lg p-3 border border-blue-200/50 dark:border-blue-700/30">
+                                        <div className="flex items-start gap-2">
+                                          <ClipboardList className="w-4 h-4 text-blue-600 dark:text-blue-400 flex-shrink-0 mt-0.5" />
+                                          <p className="text-sm text-blue-800 dark:text-blue-200 line-clamp-3">
+                                            {task.description}
+                                          </p>
+                                        </div>
+                                      </div>
+                                    </div>
+                                  )}
                                 </div>
                               </div>
+                              
+                              {/* 任务详情网格 */}
+                              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4">
+                                <div className="bg-gray-50/80 dark:bg-gray-800/50 rounded-mobile-lg p-3">
+                                  <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 flex items-center gap-1">
+                                    <FolderOpen className="w-3.5 h-3.5" />
+                                    任务信息
+                                  </div>
+                                  <div className="space-y-1 text-sm">
+                                    <p><span className="font-medium">类型:</span> {task.category}</p>
+                                    <p><span className="font-medium">文件:</span> {task.needsFile ? '必交' : '无'}</p>
+                                    <p><span className="font-medium">AIGC:</span> {task.allowAIGC ? '允许' : '禁止'}</p>
+                                    <p><span className="font-medium">班级:</span>  {task.classIds && task.classIds.length > 0
+                                      ? task.classIds.map(cls => cls.name).join('，')
+                                      : '未绑定'}
+                                  </p>
+                                  </div>
+                                </div>
 
-                              <div className="bg-gray-50/80 dark:bg-gray-800/50 rounded-mobile-lg p-3">
-                                <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 flex items-center gap-1">
-                                  <BarChart3 className="w-3.5 h-3.5" />
-                                  状态信息
+                                <div className="bg-gray-50/80 dark:bg-gray-800/50 rounded-mobile-lg p-3">
+                                  <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 flex items-center gap-1">
+                                    <Clock className="w-3.5 h-3.5" />
+                                    时间设置
+                                  </div>
+                                  <div className="space-y-1 text-sm">
+                                    <p><span className="font-medium">截止:</span> {formatDeadline(task.deadline)}</p>
+                                    <p><span className="font-medium">逾期:</span> {task.allowLateSubmission ? '允许' : '不允许'}</p>
+                                  </div>
                                 </div>
-                                <div className="space-y-1 text-sm">
-                                  {currentCategory === 'archived' && (
-                                    <p><span className="font-medium">学生查看:</span> {task.allowStudentViewWhenArchived ? '开放' : '限制'}</p>
-                                  )}
-                                  <p><span className="font-medium">创建:</span> {new Date(task.createdAt).toLocaleDateString()}</p>
+
+                                <div className="bg-gray-50/80 dark:bg-gray-800/50 rounded-mobile-lg p-3">
+                                  <div className="text-xs text-gray-500 dark:text-gray-400 mb-1 flex items-center gap-1">
+                                    <BarChart3 className="w-3.5 h-3.5" />
+                                    状态信息
+                                  </div>
+                                  <div className="space-y-1 text-sm">
+                                    {currentCategory === 'archived' && (
+                                      <p><span className="font-medium">学生查看:</span> {task.allowStudentViewWhenArchived ? '开放' : '限制'}</p>
+                                    )}
+                                    <p><span className="font-medium">创建:</span> {new Date(task.createdAt).toLocaleDateString()}</p>
+                                  </div>
                                 </div>
                               </div>
-                            </div>
-                            
-                          {/* 操作按钮组 */}
-                            <div className="flex flex-wrap gap-2">
-                              {/* 查看提交记录按钮 */}
-                              <SecondaryButton
-                                size="sm"
-                                icon={<FileText className="w-4 h-4" />}
-                                onClick={() => navigate(`/task/${task._id}/submissions`)}
-                              >
-                                查看提交
-                              </SecondaryButton>
                               
-                              {/* 班级提交情况按钮 */}
-                              <PrimaryButton
-                                size="sm"
-                                icon={<BarChart3 className="w-4 h-4" />}
-                                onClick={() => navigate(`/task/${task._id}/class-status`)}
-                              >
-                                班级统计
-                              </PrimaryButton>
-
-                                {/* 根据任务状态显示不同操作按钮 */}
-                              {currentCategory === 'active' && (
-                                <>
-                                  <SecondaryButton
-                                    size="sm"
-                                    icon={<Archive className="w-4 h-4" />}
-                                    onClick={() => setConfirmDialog({
-                                      isOpen: true,
-                                      title: '确认归档任务',
-                                      message: `确定要归档任务"${task.title}"吗？归档后学生将无法提交作业。`,
-                                      onConfirm: () => {
-                                        handleTaskOperation(task._id, 'archive');
-                                        setConfirmDialog(prev => ({ ...prev, isOpen: false }));
-                                      },
-                                      confirmText: '归档',
-                                      confirmVariant: 'primary'
-                                    })}
-                                    disabled={batchLoading}
-                                  >
-                                    归档
-                                  </SecondaryButton>
-                                  
-                                  <DangerButton
-                                    size="sm"
-                                    icon={<Trash2 className="w-4 h-4" />}
-                                    onClick={() => setConfirmDialog({
-                                      isOpen: true,
-                                      title: '确认删除任务',
-                                      message: `确定要删除任务"${task.title}"吗？删除后30天内可恢复。`,
-                                      onConfirm: () => {
-                                        handleTaskOperation(task._id, 'soft_delete');
-                                        setConfirmDialog(prev => ({ ...prev, isOpen: false }));
-                                      },
-                                      confirmText: '删除',
-                                      confirmVariant: 'danger'
-                                    })}
-                                    disabled={batchLoading}
-                                  >
-                                    删除
-                                  </DangerButton>
-                                </>
-                              )}
-
-                              {currentCategory === 'archived' && (
-                                <>
-                                  <SecondaryButton
-                                    size="sm"
-                                    icon={<Send className="w-4 h-4" />}
-                                    onClick={() => handleTaskOperation(task._id, 'unarchive')}
-                                    disabled={batchLoading}
-                                  >
-                                    恢复
-                                  </SecondaryButton>
-                                  
-                                  <SecondaryButton
-                                    size="sm"
-                                    icon={task.allowStudentViewWhenArchived ? <Lock className="w-4 h-4" /> : <Unlock className="w-4 h-4" />}
-                                    onClick={async () => {
-                                      try {
-                                        await api.put(`/task/${task._id}/student-permission`, {
-                                          allowStudentViewWhenArchived: !task.allowStudentViewWhenArchived
-                                        });
-                                        toast.success(' 权限设置成功');
-                                        await fetchTasks(currentCategory);
-                                      } catch (err) {
-                                        toast.error(` 权限设置失败：${err.response?.data?.message || err.message}`);
-                                      }
-                                    }}
-                                    disabled={batchLoading}
-                                  >
-                                    {task.allowStudentViewWhenArchived ? '限制查看' : '开放查看'}
-                                  </SecondaryButton>
-                                  
-                                  <DangerButton
-                                    size="sm"
-                                    icon={<Trash2 className="w-4 h-4" />}
-                                    onClick={() => setConfirmDialog({
-                                      isOpen: true,
-                                      title: '确认删除任务',
-                                      message: `确定要删除任务"${task.title}"吗？删除后30天内可恢复。`,
-                                      onConfirm: () => {
-                                        handleTaskOperation(task._id, 'soft_delete');
-                                        setConfirmDialog(prev => ({ ...prev, isOpen: false }));
-                                      },
-                                      confirmText: '删除',
-                                      confirmVariant: 'danger'
-                                    })}
-                                    disabled={batchLoading}
-                                  >
-                                    删除
-                                  </DangerButton>
-                                </>
-                              )}
-
-                              {currentCategory === 'deleted' && (
-                                <>
-                                  <PrimaryButton
-                                    size="sm"
-                                    icon={<RefreshCw className="w-4 h-4" />}
-                                    onClick={() => handleTaskOperation(task._id, 'restore')}
-                                    disabled={batchLoading}
-                                  >
-                                    恢复
-                                  </PrimaryButton>
-                                  
-                                  <DangerButton
-                                    size="sm"
-                                    icon={<X className="w-4 h-4" />}
-                                    onClick={() => setConfirmDialog({
-                                      isOpen: true,
-                                      title: '⚠️ 永久删除任务',
-                                      message: `确定要永久删除任务"${task.title}"吗？此操作无法撤销！`,
-                                      onConfirm: () => {
-                                        handleTaskOperation(task._id, 'hard_delete');
-                                        setConfirmDialog(prev => ({ ...prev, isOpen: false }));
-                                      },
-                                      confirmText: '永久删除',
-                                      confirmVariant: 'danger'
-                                    })}
-                                    disabled={batchLoading}
-                                  >
-                                    永久删除
-                                  </DangerButton>
-                                </>
-                              )}
+                            {/* 操作按钮组 */}
+                              <div className="flex flex-wrap gap-2">
+                                {/* 查看提交记录按钮 */}
+                                <SecondaryButton
+                                  size="sm"
+                                  icon={<FileText className="w-4 h-4" />}
+                                  onClick={() => navigate(`/task/${task._id}/submissions`)}
+                                >
+                                  查看提交
+                                </SecondaryButton>
+                                
+                                {/* 班级提交情况按钮 */}
+                                <PrimaryButton
+                                  size="sm"
+                                  icon={<BarChart3 className="w-4 h-4" />}
+                                  onClick={() => navigate(`/task/${task._id}/class-status`)}
+                                >
+                                  班级统计
+                                </PrimaryButton>
+
+                                  {/* 根据任务状态显示不同操作按钮 */}
+                                {currentCategory === 'active' && (
+                                  <>
+                                    <SecondaryButton
+                                      size="sm"
+                                      icon={<Archive className="w-4 h-4" />}
+                                      onClick={() => setConfirmDialog({
+                                        isOpen: true,
+                                        title: '确认归档任务',
+                                        message: `确定要归档任务"${task.title}"吗？归档后学生将无法提交作业。`,
+                                        onConfirm: () => {
+                                          handleTaskOperation(task._id, 'archive');
+                                          setConfirmDialog(prev => ({ ...prev, isOpen: false }));
+                                        },
+                                        confirmText: '归档',
+                                        confirmVariant: 'primary'
+                                      })}
+                                      disabled={batchLoading}
+                                    >
+                                      归档
+                                    </SecondaryButton>
+                                    
+                                    <DangerButton
+                                      size="sm"
+                                      icon={<Trash2 className="w-4 h-4" />}
+                                      onClick={() => setConfirmDialog({
+                                        isOpen: true,
+                                        title: '确认删除任务',
+                                        message: `确定要删除任务"${task.title}"吗？删除后30天内可恢复。`,
+                                        onConfirm: () => {
+                                          handleTaskOperation(task._id, 'soft_delete');
+                                          setConfirmDialog(prev => ({ ...prev, isOpen: false }));
+                                        },
+                                        confirmText: '删除',
+                                        confirmVariant: 'danger'
+                                      })}
+                                      disabled={batchLoading}
+                                    >
+                                      删除
+                                    </DangerButton>
+                                  </>
+                                )}
+
+                                {currentCategory === 'archived' && (
+                                  <>
+                                    <SecondaryButton
+                                      size="sm"
+                                      icon={<Send className="w-4 h-4" />}
+                                      onClick={() => handleTaskOperation(task._id, 'unarchive')}
+                                      disabled={batchLoading}
+                                    >
+                                      恢复
+                                    </SecondaryButton>
+                                    
+                                    <SecondaryButton
+                                      size="sm"
+                                      icon={task.allowStudentViewWhenArchived ? <Lock className="w-4 h-4" /> : <Unlock className="w-4 h-4" />}
+                                      onClick={async () => {
+                                        try {
+                                          await api.put(`/task/${task._id}/student-permission`, {
+                                            allowStudentViewWhenArchived: !task.allowStudentViewWhenArchived
+                                          });
+                                          toast.success(' 权限设置成功');
+                                          await fetchTasks(currentCategory);
+                                        } catch (err) {
+                                          toast.error(` 权限设置失败：${err.response?.data?.message || err.message}`);
+                                        }
+                                      }}
+                                      disabled={batchLoading}
+                                    >
+                                      {task.allowStudentViewWhenArchived ? '限制查看' : '开放查看'}
+                                    </SecondaryButton>
+                                    
+                                    <DangerButton
+                                      size="sm"
+                                      icon={<Trash2 className="w-4 h-4" />}
+                                      onClick={() => setConfirmDialog({
+                                        isOpen: true,
+                                        title: '确认删除任务',
+                                        message: `确定要删除任务"${task.title}"吗？删除后30天内可恢复。`,
+                                        onConfirm: () => {
+                                          handleTaskOperation(task._id, 'soft_delete');
+                                          setConfirmDialog(prev => ({ ...prev, isOpen: false }));
+                                        },
+                                        confirmText: '删除',
+                                        confirmVariant: 'danger'
+                                      })}
+                                      disabled={batchLoading}
+                                    >
+                                      删除
+                                    </DangerButton>
+                                  </>
+                                )}
+
+                                {currentCategory === 'deleted' && (
+                                  <>
+                                    <PrimaryButton
+                                      size="sm"
+                                      icon={<RefreshCw className="w-4 h-4" />}
+                                      onClick={() => handleTaskOperation(task._id, 'restore')}
+                                      disabled={batchLoading}
+                                    >
+                                      恢复
+                                    </PrimaryButton>
+                                    
+                                    <DangerButton
+                                      size="sm"
+                                      icon={<X className="w-4 h-4" />}
+                                      onClick={() => setConfirmDialog({
+                                        isOpen: true,
+                                        title: '⚠️ 永久删除任务',
+                                        message: `确定要永久删除任务"${task.title}"吗？此操作无法撤销！`,
+                                        onConfirm: () => {
+                                          handleTaskOperation(task._id, 'hard_delete');
+                                          setConfirmDialog(prev => ({ ...prev, isOpen: false }));
+                                        },
+                                        confirmText: '永久删除',
+                                        confirmVariant: 'danger'
+                                      })}
+                                      disabled={batchLoading}
+                                    >
+                                      永久删除
+                                    </DangerButton>
+                                  </>
+                                )}
+                              </div>
                             </div>
                           </div>
-                        </div>
-                      </motion.div>
-                    )
-                  ))}
+                        </motion.div>
+                      )
+                    ))
+                  )}
                 </motion.div>
               )}
             </AnimatePresence>
